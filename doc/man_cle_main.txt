This command line parser provides a list of commands and some
built-in functions, please use 'MANPAGE', 'HELP' and 'SYNTAX' to get
extensive information about these capabilities.

Additionally the build-in function 'GENDOCU' to generate a complete or
parts of the user manual can be used.

To read the parameter of a command, a compiler (command line processor
CLP) is applied. To see the regular expressions (lexems) and the
corresponding grammar, please use the built-in functions 'LEXEM' and
'GRAMMAR'.

The return/condition/exit codes of the executable and the reason codes
of the different commands can be reviewed with the built-in function
'ERRORS'.
See <<appendix-returncodes>> and, if available, <<appendix-reasoncodes>>
for the meaning of the used return and reason codes.

The command line executer (CLE) uses an owner management in order to
separate the settings for different clients and a property management
for each command. If problems occur, a trace might be activated.

For each command execution the owner and environment variables can be
defined in the configuration file.

The default trace file is 'stdout'. If the trace is activated before a
trace file is defined, the trace will be printed on the screen.

Last but not least it is possible to view the license, version and other
information about the program.

This is the ${__BUILD__} build version of the FLAMCLEP.

USED ENVIRONMENT VARIABLES
~~~~~~~~~~~~~~~~~~~~~~~~~~

 * LANG    - to determine the CCSID on EBCDIC systems
 * HOME    - to determine the home directory on UNIX/WIN
 * USER    - to determine the current user id on UNIX/WIN
 * ENVID   - for the current environment qualifier (D/T/P) if key label template mapping used (default is 'T')
 * OWNERID - used for current owner if not already defined
 * CLP_NOW - The current point in time used for predefined constants (0tYYYY/MM/DD.HH:MM:SS)
 * &{PGM}_CONFIG_FILE - the configuration filename (default is '$HOME/.&{pgm}.config' on UNIX/WIN or '&SYSUID..&{PGM}.CONFIG' on mainframes)
 * &{PGM}_DEFAULT_OWNER_ID - the default owner ID (default is '&{oWn}')
 * owner_&{PGM}_command_PROPERTY_FILENAME - To overrule default property file names
 * path_argument - to overrule the hard coded default property value
 
Environment variables can be set from the system or in the program
configuration file with the build-in function 'SETENV'. Particularly on
mainframe systems the configuration file is an easy way to define
environment variables. Additionally on host the DD name STDENV is
supported. The DD:STDENV allows to define the &{PGM}_CONFIG_FILE,
&{PGM}_DEFAULT_OWNER_ID, LANG and other environment variables in JCL:

-----------------------------------------------------------------------
 //STDENV   DD *
 &{PGM}_CONFIG_FILE=GLOBAL.&{PGM}.CONFIG
 LANG=de_DE.IBM-1141
 HOME=/u/hugo
 USER=hugo
 ENVID=T
 /*
-----------------------------------------------------------------------

Often it will be useful to have a dedicated environment per user on
mainframes. In such a case it makes sense to define the environment in
a dedicated file for each user.

-----------------------------------------------------------------------
 //STDENV   DD DSN=USER.ENVIR(&SYSUID.), DSP=SHR
-----------------------------------------------------------------------

Since z/OSv2r1 you can also used exported JCL symbols like environment
variables. The exported JCL symbols have lower priority then the same
environment variable. The service CEEGTJS is called dynamically and the
language environment must be in the steplib concatenation to use it

------------------------------------------------------------------------
 //E0       EXPORT SYMLIST=*
 //S1       SET    BLKSIZE=27886
 //S3       SET    LRECL=128
------------------------------------------------------------------------

Beside all the environment variables managed by CLE it is possible to
set all properties as environment variables to overrule the hard coded
default values with CLP. If a property is defined as environment variable
and in a property file, then the value in the property file overrules the
setting in the environment. The environment variable name for each
property is build by the rules below:

 * convert all letters to upper case
 * replace all dots (`.`) by underline (`_`)

To get a list and help for all properties please use the built-in
function 'GENPROP' to generate property files. The properties can be
defined per owner, per program and general. The owner specific
definition overrules the program specific definition and the program
specific definition overrules the general definition. Examples:

-----------------------------------------------------------------------
CONV_READ_TEXT_ENL2LF=OFF #in general the 0x15 to 0x25 conversion is off#
HUGO_FLCL_CONV_READ_TEXT_ENL2LF=ON # for owner 'hugo' the conversion is on#
-----------------------------------------------------------------------

The value string behind the sign (including the comment) will be used as
supplement for the command line processor. Aliases are not supported in
this case. You can only define properties for the main argument. If a
string must be enclosed with apostrophe, please don't use double
quotation marks, because these are used in addition if a new property
file is build based on the environment settings.

-----------------------------------------------------------------------
FLCL_ICNV_FROM='IBM-1141'         # this is the best solution 
FLCL_ICNV_TO=UTF-8                # "UTF-8" could result in errors
-----------------------------------------------------------------------

See <<appendix-properties>> for the current property file content.

ENVIRONMENT VARIABLE MAPPING
~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Each value enclosed with angle brackets (`<>`) are replaced with the
corresponding environment variable (`<LANG>`). This feature is available
at each starting point of a lexem and inside of a normal string.

If the environment variable not defined the replacements below are still
possible:
 ** <SYSUID> - Current user id in upper case
 ** <USER>   - Current user id (case sensitive)
 ** <CUSER>  - Current user id in upper case == <SYSUID>
 ** <Cuser>  - Current user id in title case
 ** <cuser>  - Current user id in lower case
 ** <HOME>   - Replaces with the users data directory, if this not
               available the replacements below are done:
 *** On UNIX with /home/<USER>
 *** On USS with /u/<USER>
 *** On ZOS with <SYSUID>

FILENAME MAPPING
~~~~~~~~~~~~~~~~

All filenames used by CLEP are additionally mapped based on the rules
below:

 * The tilde character (`~`) is replaced with the string "<HOME>"
 * DD names on mainframes must be prefixed with "DD:"
 * Data set names on mainframes are always full qualified
 * Path names on mainframes must contain a least one slash (`/`)
 * Data set names on USS must start with //
 ** Full qualified names with HLQ must enclose in apostrophes ("//''")
 ** If apostrophes are not used the SYSUID is prefixed as HLQ
 * Normal file names on other platforms could be relative
 
*ATTENTION:* If a requested environment variable is not defined, the
replacement is done with the empty string. This can result in
unexpected behavior.

To use a "<" or "~" as a part of a filename the character must be
specified twice.

Beside this rules the replacement technologies of your shell can be used,
but on some platforms $HOME, $USER or something similar might not
be available, for such cases the possibilities above are implemented.

This file name mapping is provided by the library CLEPUTL and should
also be used for file names managed by the commands supported with this
program.

KEY LABEL NAME MAPPING
~~~~~~~~~~~~~~~~~~~~~~

The key label name mapping works like the file name mapping, but you can
additional use `^` to replace it with the OWNERID (`^=<ONWERID>`) and `~`
is only replaced with login user id.

SPECIAL EBCDIC CODE PAGE SUPPORT
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

To interpret commands correctly the punctuation characters below are on
different code points depending on the EBCDIC CCSID used to enter these
values. 

------------------------------------------------------------------------
   CRITICAL PUNCTUATION CHARACTERS: ! $ # @ [ \\ ] ^ ` { | } ~ 
------------------------------------------------------------------------

These critical characters are interpreted dependent on the environment
variable LANG. If the environment variable LANG is not defined then the
compilation default CCSID (e.g. IBM-1047 on USS and IBM1141 on ZOS) is
used. Below is the current list of supported CCSIDs on EBCDIC systems.

------------------------------------------------------------------------
   SUPPORTED EBCDIC CODE PAGES FOR COMMAND ENTRY:
      "IBM-1140","IBM-1141","IBM-1142","IBM-1143",
      "IBM-1144","IBM-1145","IBM-1146","IBM-1147",
      "IBM-1148","IBM-1149","IBM-1153","IBM-1154",
      "IBM-1156","IBM-1122","IBM-1047"
      "IBM-500","IBM-273","IBM-037","IBM-875","IBM-424"
------------------------------------------------------------------------

You can define the code page explicitly (LANG=de_DE.IBM-1141) or only the
language code (LANG=de_DE, LANG=C). If only the language code defined
then the CCSID is derived from the language code (DE=IBM-1141,
US=IBM-1047, C=IBM-1047, ...).

If possible, these critical characters are also converted for print
outs. At output it is not possible to convert anything correctly,
because some strings for print out are coming from other sources (like
system messages and others). Only all known literals are converted, for
unknown variables such a conversion is not possible and CLEP expects that
such strings are encoded in the correct system code page, but there is no
guaranty for this.

On ASCII/UTF-8 platforms a miss-interpretation of punctuation characters
smaller than 128 is not possible. On such platforms the LANG variable is
not used for command interpretation or printouts.
