Environment variables can be set from the system or in the program
configuration file with the built-in function <<CLEP.BUILTIN.SETENV,SETENV>>.
Particularly on mainframe systems the configuration file is an easy way
to define environment variables. Additionally on host systems the DD
name STDENV and with lower priority the data set name '&SYSUID..STDENV'
is supported. On the other architectures the file '.stdenv' in the
working or with lower priority in the home directory can be used to
define environment variables.

The STDENV files allows to define the &{PGM}_CONFIG_FILE,
&{PGM}_DEFAULT_OWNER_ID, LANG and other environment variables
in JCL:

Below a you can find a sample with a z/OS DD name allocation.
-----------------------------------------------------------------------
 //STDENV   DD *
 &{PGM}_CONFIG_FILE=GLOBAL.&{PGM}.CONFIG
 LANG=de_DE.IBM-1141
 HOME=/u/hugo
 USER=hugo
 ENVID=T
 /*
-----------------------------------------------------------------------
The definition of the LANG variable outside of the program configuration
file is recommended, so that the system character set is defined in each
situation. The program configuration file name is used as is, there are
no replacements (<USER>) possible, because it is used in front of
establishment of the environment it self.

Often it will be useful to have a dedicated environment per user on
mainframes. In such a case it makes sense to define the environment in
a dedicated file for each user.

-----------------------------------------------------------------------
 //STDENV   DD DSN=USER.ENVIR(&SYSUID.), DSP=SHR
-----------------------------------------------------------------------

Since z/OSv2r1 you can also used exported JCL symbols like environment
variables. The exported JCL symbols have lower priority then the same
environment variable. The service CEEGTJS is called dynamically and the
language environment must be in the STEPLIB concatenation to use it.
Additional all z/OS system symbols can be used in the in the string
replacement (<&LDAY>). The environment variable have the highest
priority, followed by the exported JCL symbols. The lowest priority have
system symbols. If the variable name not found, then no replacement are
done and the angle bracket keep still in place.

------------------------------------------------------------------------
 //E0       EXPORT SYMLIST=*
 //S1       SET    BLKSIZE=27886
 //S3       SET    LRECL=128
------------------------------------------------------------------------

For z/OS, the default record format and record length for non-existent
output files is `recfm=VB, lrecl=516`. An attempt is made to open an
existing file with `recfm=*` for overwriting (DISP=OLD). If this fails,
another attempt is made with `recfm=VB, lrecl=516` to write a new file
(DISP=NEW). The environment variable CLP_DEFAULT_DCB can be used to
change this default file mode string.
See 'Keyword Parameters for File Mode' for fopen() in
_z/OS XL C/C++ Runtime Library Reference_ for more information and for
the correct syntax. Beside 'recfm' with a valid record format (not
'*' or '+') and 'lrecl', the 'space' parameter can be set.
All other file mode parameters are managed by CLP.

Beside all the environment variables managed by CLE it is possible to
set all properties as environment variables to override the hard coded
default values with CLP. If a property is defined as environment variable
and in a property file, then the value in the property file overrides the
setting in the environment. The environment variable name for each
property is build by the rules below:

* convert all characters to upper case
* replace all dots (`.`) by underline (`_`)

To get a list and help for all properties please use the built-in
function 'GENPROP' to generate property files. The properties can be
defined per owner, per program and general. The owner specific
definition overrides the program specific definition and the program
specific definition overrides the general definition. Examples:

-----------------------------------------------------------------------
CONV_READ_TEXT_ENL2LF=OFF #in general the 0x15 to 0x25 conversion is off#
HUGO_FLCL_CONV_READ_TEXT_ENL2LF=ON # for owner 'hugo' the conversion is on#
-----------------------------------------------------------------------

The value string behind the sign (including the comment) will be used as
supplement for the command line processor. Aliases are not supported in
this case. You can only define properties for the main argument. If a
string must be enclosed with apostrophe, please don't use double
quotation marks, because these are used in addition if a new property
file is build based on the environment settings.

-----------------------------------------------------------------------
FLCL_ICNV_FROM='IBM-1141'         # this is the best solution 
FLCL_ICNV_TO=UTF-8                # "UTF-8" could result in errors
-----------------------------------------------------------------------

See <<CLEP.APPENDIX.PROPERTIES,Appendix Properties>> for the current
property file content.





All these environment variables can be managed through the built-in
functions SETENV, GETENV and DELENV within the &{PGM} configuration file.
On mainframes, you can also use the 'DD:STDENV' or the data set name
'&SYSUID..STDENV' to define environment variables. On UNIX and Windows
like platform the files '.stdenv' are read from the working and if this
not available from the home directory. For Micro Focus EDZ environments
the DD name SYSVAR is additional supported to define system variables.
The function used to read the 'keyword=value' pairs automatically detect
if EBCDIC used (character > 0x80) and convert the lines automatically in
the local character set. Some of these environment variables (LANG,
ENVID, ...) can also be defined through system variable (&FLZEDC)
definitions (see install.txt) on z/OS.

The environment variable LANG is also used on EBCDIC systems to
interpret several syntax characters correctly, which depends on the
codepage. It is important to set this variable to the correct value on
EBCDIC systems. If this environment variable is not set, literals are
interpreted in IBM-1047 on ZOS and USS. If you use another CCSID for
entry, you must define the environment variable LANG to enable correct
parsing for strings that contain special characters like '~'. We
recommend to define the corresponding system variables (&FLANGLC,
&FLANGCC and &FLANGCS) for it on z/OS.

The variable FLAM4MF and (if needed) FLAM4MF_TRACEFILE should be set in
the environment of the Microfocus Enterprise Server instance where the
FLAM or FLUC record interfaces are used. To define static and dynamic
system variables, the FLAM4MF_STATIC/DYNAMIC_SYSVAR environment variable
can be used to read the system variables to the environment. The second
file was mainly introduce for the MF-EDZ JCL user exit, which can be
used to provide the dynamic symbols like JOBNAME as 'keyword=value' pair
as the dynamic file. All the files read to build the environment undergo
automatic ASCII and EBCDIC detection. A semicolon can be used to mark
the end of a keyword-value pair (an inline FB80 encoding in JCL on EDZ
does not contain new line characters).
To undefine an environment variable, there must be no characters behind
the equal sign. To replace a variable with nothing upon use, the
environment variable must be set to one or more whitespace character(s).
Trailing whitespace is removed from the value string, so a value which
contains only whitespace characters will result in an empty string upon
substitution.
