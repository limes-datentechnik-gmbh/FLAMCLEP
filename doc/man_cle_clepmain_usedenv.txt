Environment variables can be managed via the operating system or via the
&{PGM} configuration. The latter can be managed with the built-in
functions <<CLEP.BUILTIN.SETENV,SETENV>>, <<CLEP.BUILTIN.GETENV,GETENV>>
and <<CLEP.BUILTIN.DELENV,DELENV>>. To list the current state of all usable environment
variables the built-in function <<CLEP.BUILTIN.LSTENV,LSTENV>> can be used.
For help messages for each usable environment variable please use <<CLEP.BUILTIN.HLPENV,HLPENV>>
There are also some platform-specific mechanishms that can be used to
set environment variables:

..Linux, Windows, USS and other Unix-like OS
Environment variables are read from the file `.stdenv` in the current
working directory or the user's home directory. The file in the home
directory is only considered if the file does not exist in the working
directory or cannot be read.

..Micro Focus EDZ
For Micro Focus EDZ environments, the DD name SYSVAR is supported to
define system variables. The function used to read the `keyword=value`
pairs automatically detects if EBCDIC is used (character > 0x80) and
converts the lines automatically to the local character set.

..Mainframe systems
`DD:STDENV` or the data set name `&SYSUID..STDENV` can alternatively be
used to set environment variables. Some of the environment variables
(e.g. LANG, ENVID, ...) can also be set through system variable
(`&FLZEDC`) definitions (see install.txt) on z/OS.

The `STDENV` file allows to define the `&{PGM}_CONFIG_FILE`,
`&{PGM}_DEFAULT_OWNER_ID`, `LANG` and other environment variables
in JCL.

Example with a z/OS DD name allocation:
-----------------------------------------------------------------------
 //STDENV   DD *
 &{PGM}_CONFIG_FILE=GLOBAL.&{PGM}.CONFIG
 LANG=de_DE.IBM-1141
 HOME=/u/hugo
 USER=hugo
 ENVID=T
 /*
-----------------------------------------------------------------------
The definition of the LANG variable outside of the program configuration
file is recommended, so that the system character set is defined in each
situation. The program configuration filename is used as is. No
placeholder substitutions (e.g. `<USER>`) are possible.

It might be useful to have a dedicated environment per user on
mainframes. In such a case, it makes sense to define the environment in
a dedicated file for each user.

-----------------------------------------------------------------------
 //STDENV   DD DSN=USER.ENVIR(&SYSUID.), DSP=SHR
-----------------------------------------------------------------------

Since z/OSv2r1 you can also use exported JCL symbols like environment
variables. The exported JCL symbols have lower priority than the same
environment variable. The service CEEGTJS is called dynamically and the
language environment must be in the STEPLIB concatenation to use it.
Additionally, all z/OS system symbols can be used in the string
replacement (<&LDAY>). The environment variables have the highest
priority, followed by the exported JCL symbols. System symbols have the
lowest priority. If the variable name is not found, then no replacement
is done and the angle brackets are kept in place.

------------------------------------------------------------------------
 //E0       EXPORT SYMLIST=*
 //S1       SET    BLKSIZE=27886
 //S3       SET    LRECL=128
------------------------------------------------------------------------

...Default record format
For z/OS, the default record format and record length for non-existent
output files is `recfm=VB, lrecl=516`. An attempt is made to open an
existing file with `recfm=*` for overwriting (DISP=OLD). If this fails,
another attempt is made with `recfm=VB, lrecl=516` to write a new file
(DISP=NEW). The environment variable `CLP_DEFAULT_DCB` can be used to
change this default file mode string.

See "Keyword Parameters for File Mode" for fopen() in
_z/OS XL C/C++ Runtime Library Reference_ for more information and for
the correct syntax. Beside `recfm` with a valid record format (not
+ or *) and `lrecl`, the `space` parameter can be set.
All other file mode parameters are managed by CLP.

.Property file vs. environment variables
Beside all the environment variables managed by CLE it is possible to
set all properties as environment variables to override the hard coded
default values with CLP. If a property is defined as environment variable
and in a property file, then the value in the property file overrides the
setting in the environment. The environment variable name for each
property is built by the rules below:

* convert all characters to upper case
* replace all dots (`.`) by underline (`_`)

To get a list and help for all properties please use the built-in
function `GENPROP` to generate property files. The properties can be
defined per owner, per program and globally. The owner-specific
definition overrides the program specific definition and the
program-specific definition overrides the global definition.

Examples:
-----------------------------------------------------------------------
CONV_READ_TEXT_ENL2LF=OFF #in general the 0x15 to 0x25 conversion is off#
HUGO_FLCL_CONV_READ_TEXT_ENL2LF=ON # for owner 'hugo' the conversion is on#
-----------------------------------------------------------------------

The value string behind the sign (including the comment) will be used
as supplement for the command line processor. Aliases are not supported
in this case. You can only define properties for the main argument. If a
string must be enclosed with apostrophe, please don't use double
quotation marks because these are used in addition if a new property
file is built based on the environment settings.

-----------------------------------------------------------------------
FLCL_ICNV_FROM='IBM-1141'         # this is the best solution 
FLCL_ICNV_TO=UTF-8                # "UTF-8" could result in errors
-----------------------------------------------------------------------

See <<CLEP.APPENDIX.PROPERTIES,Appendix Properties>> for the current
property file content.
